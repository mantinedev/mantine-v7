(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6708],{33507:function(e,n,r){"use strict";r.d(n,{Z:function(){return t}});var t=(0,r(30853).Z)("arrow-left","IconArrowLeft",[["path",{d:"M5 12l14 0",key:"svg-0"}],["path",{d:"M5 12l6 6",key:"svg-1"}],["path",{d:"M5 12l6 -6",key:"svg-2"}]])},12162:function(e,n,r){"use strict";r.d(n,{Z:function(){return t}});var t=(0,r(30853).Z)("arrow-right","IconArrowRight",[["path",{d:"M5 12l14 0",key:"svg-0"}],["path",{d:"M13 18l6 -6",key:"svg-1"}],["path",{d:"M13 6l6 6",key:"svg-2"}]])},8427:function(e,n,r){"use strict";r.d(n,{Z:function(){return t}});var t=(0,r(30853).Z)("calendar","IconCalendar",[["path",{d:"M4 7a2 2 0 0 1 2 -2h12a2 2 0 0 1 2 2v12a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2v-12z",key:"svg-0"}],["path",{d:"M16 3v4",key:"svg-1"}],["path",{d:"M8 3v4",key:"svg-2"}],["path",{d:"M4 11h16",key:"svg-3"}],["path",{d:"M11 15h1",key:"svg-4"}],["path",{d:"M12 15v3",key:"svg-5"}]])},38767:function(e,n,r){"use strict";r.d(n,{Z:function(){return t}});var t=(0,r(30853).Z)("license","IconLicense",[["path",{d:"M15 21h-9a3 3 0 0 1 -3 -3v-1h10v2a2 2 0 0 0 4 0v-14a2 2 0 1 1 2 2h-2m2 -4h-11a3 3 0 0 0 -3 3v11",key:"svg-0"}],["path",{d:"M9 7l4 0",key:"svg-1"}],["path",{d:"M9 11l4 0",key:"svg-2"}]])},94342:function(e,n,r){"use strict";r.d(n,{Z:function(){return t}});var t=(0,r(30853).Z)("list","IconList",[["path",{d:"M9 6l11 0",key:"svg-0"}],["path",{d:"M9 12l11 0",key:"svg-1"}],["path",{d:"M9 18l11 0",key:"svg-2"}],["path",{d:"M5 6l0 .01",key:"svg-3"}],["path",{d:"M5 12l0 .01",key:"svg-4"}],["path",{d:"M5 18l0 .01",key:"svg-5"}]])},30471:function(e,n,r){"use strict";r.d(n,{Z:function(){return t}});var t=(0,r(30853).Z)("pencil","IconPencil",[["path",{d:"M4 20h4l10.5 -10.5a2.828 2.828 0 1 0 -4 -4l-10.5 10.5v4",key:"svg-0"}],["path",{d:"M13.5 6.5l4 4",key:"svg-1"}]])},62640:function(e,n,r){"use strict";r.d(n,{Z:function(){return t}});var t=(0,r(30853).Z)("switch-2","IconSwitch2",[["path",{d:"M3 17h5l1.67 -2.386m3.66 -5.227l1.67 -2.387h6",key:"svg-0"}],["path",{d:"M18 4l3 3l-3 3",key:"svg-1"}],["path",{d:"M3 7h5l7 10h6",key:"svg-2"}],["path",{d:"M18 20l3 -3l-3 -3",key:"svg-3"}]])},94629:function(e,n,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/theming/mantine-provider",function(){return r(89341)}])},89341:function(e,n,r){"use strict";r.r(n),r.d(n,{default:function(){return v}});var t=r(85893),s=r(11151),o=r(19905),i=r(9904),a=r(67294),c=r(49441),l=r(74378),d=r(55899);let h=`
import { MantineThemeProvider, Button, Group } from '@mantine/core';

function Demo() {
  return (
    <MantineThemeProvider>
      <Group>
        <Button>Default button</Button>

        <MantineThemeProvider theme={{ primaryColor: 'red' }}>
          <Button>Inside MantineThemeProvider</Button>
        </MantineThemeProvider>
      </Group>
    </MantineThemeProvider>
  );
}
`,m={type:"code",component:function(){return a.createElement(c.M2,null,a.createElement(l.Z,null,a.createElement(d.z,null,"Default button"),a.createElement(c.M2,{theme:{primaryColor:"red"}},a.createElement(d.z,null,"Inside MantineThemeProvider"))))},centered:!0,code:h},u=(0,o.A)(i.us.MantineProvider);function x(e){let n=Object.assign({h1:"h1",p:"p",code:"code",a:"a",h2:"h2",pre:"pre",h3:"h3",strong:"strong",ul:"ul",li:"li",blockquote:"blockquote"},(0,s.ah)(),e.components),{Demo:r}=n;return r||function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Demo",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"mantineprovider",children:"MantineProvider"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"MantineProvider"})," provides ",(0,t.jsx)(n.a,{href:"/theming/theme-object",children:"theme object"})," context value, manages color scheme\nchanges and injects ",(0,t.jsx)(n.a,{href:"/styles/css-variables/",children:"CSS variables"}),". It must be rendered at the root of your\napplication and should be user only once."]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { MantineProvider, createTheme } from '@mantine/core';\n\nconst theme = createTheme({\n  /** Your theme override here */\n});\n\nfunction Demo() {\n  return (\n    <MantineProvider theme={theme}>\n      <App />\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"mantineprovider-props",children:"MantineProvider props"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"MantineProvider"})," supports the following props:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"interface MantineProviderProps {\n  /** Theme override object */\n  theme?: MantineThemeOverride;\n\n  /** Used to retrieve/set color scheme value in external storage, by default uses `window.localStorage` */\n  colorSchemeManager?: MantineColorSchemeManager;\n\n  /** Default color scheme value used when `colorSchemeManager` cannot retrieve value from external storage, `auto` by default */\n  defaultColorScheme?: MantineColorScheme;\n\n  /** CSS selector to which CSS variables should be added, `:root` by default */\n  cssVariablesSelector?: string;\n\n  /** Determines whether theme CSS variables should be added to given `cssVariablesSelector`, `true` by default */\n  withCssVariables?: boolean;\n\n  /** Function to resolve root element to set `data-mantine-color-scheme` attribute, must return undefined on server, `() => document.documentElement` by default */\n  getRootElement?(): HTMLElement | undefined;\n\n  /** A prefix for components static classes (for example {selector}-Text-root), `mantine` by default */\n  classNamesPrefix?: string;\n\n  /** Function to generate nonce attribute added to all generated `<style />` tags */\n  getStyleNonce?(): string;\n\n  /** Function to generate CSS variables based on theme object */\n  cssVariablesResolver?: CSSVariablesResolver;\n\n  /** Your application */\n  children?: React.ReactNode;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"theme",children:"theme"}),"\n",(0,t.jsxs)(n.p,{children:["Pass ",(0,t.jsx)(n.a,{href:"/theming/theme-object",children:"theme object"})," override to ",(0,t.jsx)(n.code,{children:"theme"})," prop. It will be merged with the default\ntheme and used in all components."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { MantineProvider, createTheme } from '@mantine/core';\n\nconst theme = createTheme({\n  fontFamily: 'Open Sans, sans-serif',\n  primaryColor: 'cyan',\n});\n\nfunction Demo() {\n  return (\n    <MantineProvider theme={theme}>\n      <App />\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"colorschememanager",children:"colorSchemeManager"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"colorSchemeManager"})," is used to retrieve and set color scheme value in external storage. By default,\n",(0,t.jsx)(n.code,{children:"MantineProvider"})," uses ",(0,t.jsx)(n.code,{children:"window.localStorage"})," to store color scheme value, but you can pass your own\nimplementation to ",(0,t.jsx)(n.code,{children:"colorSchemeManager"})," prop. You can learn more about color scheme management in the\n",(0,t.jsx)(n.a,{href:"/theming/color-schemes",children:"color schemes guide"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { MantineProvider, localStorageColorSchemeManager } from '@mantine/core';\n\nconst colorSchemeManager = localStorageColorSchemeManager({ key: 'my-app-color-scheme' });\n\nfunction Demo() {\n  return (\n    <MantineProvider colorSchemeManager={colorSchemeManager}>\n      <App />\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"defaultcolorscheme",children:"defaultColorScheme"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"defaultColorScheme"})," value is used when ",(0,t.jsx)(n.code,{children:"colorSchemeManager"})," cannot retrieve the value from external\nstorage, for example during server side rendering or when the user hasn't selected a preferred color scheme.\nPossible values are ",(0,t.jsx)(n.code,{children:"light"}),", ",(0,t.jsx)(n.code,{children:"dark"})," and ",(0,t.jsx)(n.code,{children:"auto"}),". By default, it is set to ",(0,t.jsx)(n.code,{children:"auto"}),",\nwhich means that the color scheme will be determined based on user system preferences.\nYou can learn more about color scheme management in the ",(0,t.jsx)(n.a,{href:"/theming/color-schemes",children:"color schemes guide"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { MantineProvider } from '@mantine/core';\n\nfunction Demo() {\n  return (\n    <MantineProvider defaultColorScheme=\"dark\">\n      <App />\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"cssvariablesselector",children:"cssVariablesSelector"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"cssVariablesSelector"})," is a CSS selector to which ",(0,t.jsx)(n.a,{href:"/styles/css-variables/",children:"CSS variables"})," should be added.\nBy default, it is ",(0,t.jsx)(n.code,{children:":root"}),". ",(0,t.jsx)(n.code,{children:"MantineProvider"})," generates CSS variables based on given ",(0,t.jsx)(n.a,{href:"/theming/theme-object/",children:"theme override"}),"\nand ",(0,t.jsx)(n.code,{children:"cssVariablesResolver"}),", then these variables are rendered into ",(0,t.jsx)(n.code,{children:"<style />"})," tag next to your application.\nYou can learn more about Mantine CSS variables in the ",(0,t.jsx)(n.a,{href:"/styles/css-variables/",children:"CSS variables guide"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { MantineProvider } from '@mantine/core';\n\nfunction Demo() {\n  return (\n    <MantineProvider cssVariablesSelector=\"html\">\n      <App />\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"withcssvariables",children:"withCssVariables"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"withCssVariables"})," determines whether theme CSS variables should be added to given ",(0,t.jsx)(n.code,{children:"cssVariablesSelector"}),".\nBy default, it is set to ",(0,t.jsx)(n.code,{children:"true"}),", you should not change it unless you want to manage CSS variables\nvia ",(0,t.jsx)(n.code,{children:".css"})," file (Note that in this case you will need to generate all theme tokens\nthat are not a part of the default theme on your side)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { MantineProvider } from '@mantine/core';\n\nfunction Demo() {\n  return (\n    <MantineProvider withCssVariables={false}>\n      <App />\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"getrootelement",children:"getRootElement"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"getRootElement"})," is a function that returns the root application (usually ",(0,t.jsx)(n.code,{children:"html"}),") element to set ",(0,t.jsx)(n.code,{children:"data-mantine-color-scheme"})," attribute.\nDefault value is ",(0,t.jsx)(n.code,{children:"() => document.documentElement"})," which means that ",(0,t.jsx)(n.code,{children:"data-mantine-color-scheme"}),"\nattribute will be added to ",(0,t.jsx)(n.code,{children:"<html />"})," tag. You can learn more about color scheme management in the\n",(0,t.jsx)(n.a,{href:"/theming/color-schemes",children:"color schemes guide"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { MantineProvider } from '@mantine/core';\n\nconst getRootElement = () => (typeof window === 'undefined' ? undefined : document.body);\n\nfunction Demo() {\n  return (\n    <MantineProvider getRootElement={getRootElement}>\n      <App />\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"classnamesprefix",children:"classNamesPrefix"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"classNamesPrefix"})," is a prefix for components static classes (for example ",(0,t.jsx)(n.code,{children:"{selector}-Text-root"}),").\nDefault value is ",(0,t.jsx)(n.code,{children:"mantine"})," – all components will have ",(0,t.jsx)(n.code,{children:"mantine-"})," prefix in their ",(0,t.jsx)(n.strong,{children:"static classes"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { Text, MantineProvider } from '@mantine/core';\n\nfunction Demo() {\n  return (\n    <MantineProvider>\n      <Text>Just some text</Text>\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In this case (default ",(0,t.jsx)(n.code,{children:"classNamesPrefix"}),"), ",(0,t.jsx)(n.a,{href:"/core/text",children:"Text"})," component will have the following classes:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"mantine-focus-auto"})," – global utility class"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"m-3nrA4eL"})," – component class, usually a random string, with this class library styles are applied"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"mantine-Text-root"})," – component static class, part of ",(0,t.jsx)(n.a,{href:"/styles/styles-api",children:"Styles API"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["With ",(0,t.jsx)(n.code,{children:"classNamesPrefix"})," you can change only ",(0,t.jsx)(n.strong,{children:"static class"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { Text, MantineProvider } from '@mantine/core';\n\nfunction Demo() {\n  return (\n    <MantineProvider classNamesPrefix=\"app\">\n      <Text>Just some text</Text>\n    </MantineProvider>\n  );\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now ",(0,t.jsx)(n.a,{href:"/core/text",children:"Text"})," component will have the following classes:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"mantine-focus-auto"})," – ",(0,t.jsx)(n.code,{children:"classNamesPrefix"})," does not impact global utility classes – it is static and ",(0,t.jsx)(n.strong,{children:"cannot be changed"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"m-3nrA4eL"})," – ",(0,t.jsx)(n.code,{children:"classNamesPrefix"})," does not impact library class – it is static and ",(0,t.jsx)(n.strong,{children:"cannot be changed"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"app-Text-root"})," – component static class has ",(0,t.jsx)(n.code,{children:"classNamesPrefix"})," instead of ",(0,t.jsx)(n.code,{children:"mantine"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"getstylenonce",children:"getStyleNonce"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"getStyleNonce"})," is a function to generate ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce",children:"nonce"})," attribute added to dynamic generated ",(0,t.jsx)(n.code,{children:"<style />"})," tags."]}),"\n",(0,t.jsx)(n.h3,{id:"cssvariablesresolver",children:"cssVariablesResolver"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"cssVariablesResolver"})," is a function to generate CSS variables styles based on the ",(0,t.jsx)(n.a,{href:"/theming/theme-object",children:"theme object"}),".\nYou can learn more about Mantine CSS variables in the ",(0,t.jsx)(n.a,{href:"/styles/css-variables#css-variables-resolver",children:"CSS variables guide"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"mantinethemeprovider",children:"MantineThemeProvider"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"MantineThemeProvider"})," allows overriding ",(0,t.jsx)(n.a,{href:"/theming/theme-object",children:"theme"})," values for a subtree of components.\nNote that values that are used to generate ",(0,t.jsx)(n.a,{href:"/styles/css-variables",children:"CSS variables"})," cannot be overridden with ",(0,t.jsx)(n.code,{children:"MantineThemeProvider"}),".\nFor example, you cannot use ",(0,t.jsx)(n.code,{children:"MantineThemeProvider"})," to override ",(0,t.jsx)(n.code,{children:"colors"})," or ",(0,t.jsx)(n.code,{children:"fontSizes"}),"."]}),"\n",(0,t.jsx)(r,{data:m}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Difference between MantineProvider and MantineThemeProvider"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"MantineProvider"})," is used for:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Color scheme management"}),"\n",(0,t.jsx)(n.li,{children:"CSS variables generation"}),"\n",(0,t.jsx)(n.li,{children:"Providing theme context"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"MantineThemeProvider"})," is only used to change theme context – it does not generate CSS variables or manage color scheme."]}),"\n",(0,t.jsxs)(n.p,{children:["It is not recommended to have more than one ",(0,t.jsx)(n.code,{children:"MantineProvider"})," in your application, but you can have as many ",(0,t.jsx)(n.code,{children:"MantineThemeProvider"})," as you need."]}),"\n"]})]})}var v=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,t.jsx)(u,Object.assign({},e,{children:(0,t.jsx)(x,e)}))}}},function(e){e.O(0,[1300,178,9774,2888,179],function(){return e(e.s=94629)}),_N_E=e.O()}]);